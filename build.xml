<!-- http://www.salesforce.com/us/developer/docs/daas/salesforce_migration_guide.pdf -->
<!-- http://www.salesforce.com/us/developer/docs/api_meta/ -->

<project name="SFDC Case Matcher Server"
         default="retrieve"
         basedir="."
         xmlns:artifact="antlib:org.apache.maven.artifact.ant"
         xmlns:sf="antlib:com.salesforce">

  <property file="build.properties"/>
  <property environment="env"/>

  <property name="sf.api" value="29.0"/>

  <property name="m2.repo.url" value="http://repo1.maven.org/maven2"/>

  <property name="m2.install.version" value="2.1.3"/>

  <condition property="m2.home" value="${env.M2_HOME}">
    <isset property="env.M2_HOME"/>
  </condition>

  <property name="m2.home" value="${user.home}/.m2"/>
  <property name="m2.jar.dir" value="${m2.home}/lib/ant"/>
  <property name="m2.jar.file" value="${m2.jar.dir}/maven-ant-tasks-${m2.install.version}.jar"/>
  
  <target name="-can-download-m2" unless="mvn.compile.classpath">
    <condition property="m2.download">
      <not>
        <or>
          <available file="${m2.jar.file}"/>
          <isset property="offline"/>
        </or>
      </not>
    </condition>
  </target>
  
  <target name="-download-m2" depends="-can-download-m2" if="m2.download">
    <mkdir dir="${m2.home}"/>
    <mkdir dir="${m2.jar.dir}"/>
    <!-- download Maven Ant Tasks from web site so that it can be used even without any special installation -->
    <get src="${m2.repo.url}/org/apache/maven/maven-ant-tasks/${m2.install.version}/maven-ant-tasks-${m2.install.version}.jar"
         dest="${m2.jar.file}" usetimestamp="true"/>
  </target>
  
  <target name="-can-init-m2" depends="-download-m2" unless="mvn.compile.classpath">
    <!--
    Try to load Maven Ant Tasks here from m2 home, in case the user has not already dropped
    it into ant's lib dir (note that the latter copy will always take precedence)
    We will not fail as long as local lib dir exists (it may be empty) and
    Maven Ant Tasks is in at least one of ant's lib dir or the local lib dir.
    -->
    <path id="m2.classpath" path="${m2.jar.file}"/>
    
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpathref="m2.classpath"/>
    
    <artifact:pom id="pom" file="${basedir}/pom.xml"/>
    
    <artifact:dependencies pathId="maven.compile.classpath" pomRefId="pom"/>
  </target>
  
  <target name="-init-m2" depends="-can-init-m2" if="mvn.compile.classpath">
    <path id="maven.compile.classpath" path="${mvn.compile.classpath}"/>
  </target>

  <target name="-init-migration-tool" depends="-init-m2">
    <taskdef resource="com/salesforce/antlib.xml"
             uri="antlib:com.salesforce" 
             classpathref="maven.compile.classpath"/>
  </target>

  <target name="-init-load" depends="-init-m2, -set-proxy">
    <property name="sf.dataloader.conf" value="${basedir}/data"/>

    <property name="sfdc.username" value="${sf.username}"/>
    <encryptProperty name="sfdc.password" value="${sf.password}"/>

    <property name="sfdc.endpoint" value="${sf.serverurl}/services/Soap/u/${sf.api}"/>

    <echoproperties destfile="${sf.dataloader.conf}/config.properties" prefix="sfdc"/>
  </target>

  <target name="-probe-proxy">
    <condition property="proxy.enabled">
      <and>
        <isset property="proxy.host"/>
        <isreachable host="${proxy.host}"/>
      </and>
    </condition>
  </target>

  <target name="-set-proxy" depends="-init-m2, -probe-proxy" if="proxy.enabled">
    <property name="proxy.port" value="80"/>
    <property name="proxy.user" value=""/>
    <property name="proxy.pass" value=""/>

    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"
              proxyuser="${proxy.user}" proxypassword="${proxy.pass}"/>

    <property name="sfdc.proxyHost" value="${proxy.host}"/>
    <property name="sfdc.proxyPort" value="${proxy.port}"/>
    <property name="sfdc.proxyUsername" value="${proxy.user}}"/>

    <encryptProperty name="sfdc.proxyPassword" value="${proxy.pass}"/>
  </target>

  <target name="deploy" depends="deploy-code, load-data"/>

  <!-- Shows deploying code & running tests for code in directory -->
  <target name="deploy-code" depends="-init-migration-tool">
    <!-- Upload the contents of the "src" directory, running the tests for just 1 class  -->
    <sf:deploy   username="${sf.username}"
                 password="${sf.password}"
                 serverurl="${sf.serverurl}"
                 maxPoll="${sf.maxPoll}"
                 pollWaitMillis="${sf.pollWaitMillis}"
                 deployRoot="src">
      <runTest>CaseMatcherTests</runTest>
    </sf:deploy>
  </target>

  <target name="list-custom-object" depends="-init-migration-tool">
    <mkdir dir="${basedir}/test"/>
    <sf:listMetadata username="${sf.username}"
                     password="${sf.password}"
                     serverurl="${sf.serverurl}"
                     metadataType="CustomObject"
                     resultFilePath="${basedir}/test/list-custom-object.txt"/>
  </target>

  <target name="load-data" depends="-init-load">
    <java classname="com.salesforce.dataloader.process.ProcessRunner"
          classpathref="maven.compile.classpath"
          failonerror="true">
      <sysproperty key="user.dir" value="${sf.dataloader.conf}"/>
      <sysproperty key="salesforce.config.dir" value="${sf.dataloader.conf}"/>
      <arg value="process.name=Insert_Email_To_Case_Matching_Rules"/>
    </java>
  </target>

  <!-- Retrieve an unpackaged set of metadata from your org -->
  <!-- The file src/package.xml lists what is to be retrieved -->
  <target name="retrieve" depends="-init-migration-tool">
    <!-- Retrieve the contents into another directory -->
    <sf:retrieve   username="${sf.username}"
                   password="${sf.password}"
                   serverurl="${sf.serverurl}"
                   maxPoll="${sf.maxPoll}"
                   pollWaitMillis="${sf.pollWaitMillis}"
                   retrieveTarget="src"
                   unpackaged="src/package.xml"/>
  </target>

  <!-- Removing metadata -->
  <target name="undeploy" depends="-init-migration-tool">
    <sf:deploy   username="${sf.username}"
                 password="${sf.password}"
                 serverurl="${sf.serverurl}"
                 maxPoll="${sf.maxPoll}"
                 pollWaitMillis="${sf.pollWaitMillis}"
                 deployRoot="undeploy">
    </sf:deploy>
  </target>

  <macrodef name="encryptProperty">
    <attribute name="name"/>
    <attribute name="value"/>
    <sequential>
      <java classname="com.salesforce.dataloader.security.EncryptionUtil"
            outputproperty="@{name}"
            classpathref="maven.compile.classpath"
            fork="true"
            failonerror="true"
            logError="true">
        <jvmarg value="-Dlog4j.configuration=file:data/encryption.log4j.xml"/>
        <arg value="-e"/>
        <arg value="@{value}"/>
      </java>
    </sequential>
  </macrodef>
</project>